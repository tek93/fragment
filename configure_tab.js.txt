

import React, { useState } from 'react';
import axios from 'axios';
import { toastNotifications } from 'ui/notify';
import {
  EuiButton,
  EuiModal,
  EuiModalBody,
  EuiModalFooter,
  EuiModalHeader,
  EuiModalHeaderTitle,
  EuiOverlayMask,
  EuiForm,
  EuiFormRow,
  EuiSelect,
  EuiFieldText,
  EuiButtonEmpty,
} from '@elastic/eui';

import { indicesToRollover } from '../../../../login/public/common';

export default function ConfigureLegacyModal(props) {
  const [rolloverMaxAge, setRolloverMaxAge] = useState(false);
  const [rolloverMaxDocs, setRolloverMaxDocs] = useState(false);
  const [rolloverMaxSize, setRolloverMaxSize] = useState(false);
  const [isRolloverSettingsLoading, setIsRolloverSettingsLoading] = useState(false);
  const isRolloverUpdatePossible = rolloverMaxAge || rolloverMaxDocs || rolloverMaxSize;
  const [selectedIndexToConfigure, setSelectedIndexToConfigure] = useState('');

  const getRolloverSettings = (getDefaults = false) => {
    console.log(getDefaults);
    const defaultSufix = `?defaults=${getDefaults}`;
    axios
      .get(`../api/admin/settings/rollover/${selectedIndexToConfigure}${defaultSufix}`)
      .then(response => {
        if (response.data) {
          /* eslint-disable camelcase */
          const { max_size, max_docs, max_age } = response.data;

          setRolloverMaxAge(max_age || '');
          setRolloverMaxDocs(max_docs || '');
          setRolloverMaxSize(max_size || '');

          /* eslint-enable camelcase */
        }
      })
      .catch(error => {
        toastNotifications.addDanger(
          `Error occurred while retrieving rollover settings: ${
            error && error.response && error.response.data && error.response.data.message
              ? error.response.data.message
              : error.message
          }`
        );
      })
      .finally(() => setIsRolloverSettingsLoading(false));
  };

  const onSelectedRolloverIndexChange = event => {
    setSelectedIndexToConfigure(event.target.value);
    console.log(selectedIndexToConfigure);
    console.log(event.target.value);
    if (event.target.value) {
      getRolloverSettings(false);
    }
  };

    